{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["commerce","Commerce","App","useState","product","setProduct","regex","useEffect","products","list","then","result","data","map","console","log","className","index","key","alt","name","srcSet","media","source","description","replace","price","formatted_with_symbol","href","checkout_url","display","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gPAGMA,EAAW,I,OAAIC,GACnB,yDACA,GAyDaC,EAtDH,WAAM,MAEcC,mBAAS,IAFvB,mBAETC,EAFS,KAEAC,EAFA,KAIVC,EAAQ,gBAWd,OARAC,qBAAU,WACRP,EAASQ,SAASC,OAAOC,MAAK,SAAAC,GAC5BN,EAAWM,EAAOC,KAAKC,KAAI,SAAAT,GAAO,OAAIA,WAEvC,IAEHU,QAAQC,IAAI,qBAAsBX,GAGhC,6BAASY,UAAU,gBAEhBZ,EAAQS,KAAI,SAACT,EAASa,GAAV,OAEX,yBAAKC,IAAKD,EAAOD,UAAU,WAEzB,yBAAKA,UAAU,iBACb,yBACEG,IAAKf,EAAQgB,KACbC,OAAQjB,EAAQkB,MAAMC,OACtBP,UAAU,SAKd,yBAAKA,UAAU,kBAEb,wBAAIA,UAAU,SAASZ,EAAQgB,MAG/B,uBAAGJ,UAAU,eAEVZ,EAAQoB,YAAYC,QAAQnB,EAAO,KAItC,uBAAGU,UAAU,SAASZ,EAAQsB,MAAMC,uBAEpC,uBAAGC,KAAMxB,EAAQyB,aAAaC,QAASd,UAAU,OAAjD,kBCxCQe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.002e77c9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Commerce from '@chec/commerce.js';\n// Let's get started by creating a new Commerce instance!\nconst commerce = new Commerce(\n  'pk_test_17790b0a3287a61fe161361f22173977d24f206108ee9',\n  true\n);\n\nconst App = () => {\n  // This variable will hold our products data\n  const [product, setProduct] = useState([]);\n  // Helper function to express our description into a regular string\n  const regex = /(<([^>]+)>)/gi;\n\n  // Fetches data from the Chec API to the \"product\" variable\n  useEffect(() => {\n    commerce.products.list().then(result => {\n      setProduct(result.data.map(product => product));\n    });\n  }, []);\n\n  console.log('Commerce Product: ', product);\n\n  return (\n    <section className='product-list'>\n      {/* Iterate through our product array and return/render it out onto our page */}\n      {product.map((product, index) => (\n        // Product box that holds our product information\n        <div key={index} className='product'>\n          {/* Image of your product */}\n          <div className='product-image'>\n            <img\n              alt={product.name}\n              srcSet={product.media.source}\n              className='img'\n            />\n          </div>\n\n          {/* Product details (name, description, and price) */}\n          <div className='product-detail'>\n            {/* Product name */}\n            <h2 className='title'>{product.name}</h2>\n\n            {/* Product description */}\n            <p className='description'>\n              {/* Remember we added a helper function at the top of the file? This regex helps render this expression into a regular string without the HTML element tags. */}\n              {product.description.replace(regex, '')}\n            </p>\n\n            {/* Displays price formatted with symbol($10.00) */}\n            <p className='price'>{product.price.formatted_with_symbol}</p>\n            {/* Product checkout url --  Take you to the display page */}\n            <a href={product.checkout_url.display} className='btn'>\n              Buy now\n            </a>\n          </div>\n        </div>\n      ))}\n    </section>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}